stages:
  - build
  - deploy

build-staging:
  stage: build
  script:
    - docker login -u $GIT_CI_USERNAME -p $GIT_CI_PASSWORD $GIT_CI_REGISTRY
    - docker build -t $GIT_CI_IMAGE_REGISTRY .
    - docker tag $GIT_CI_IMAGE_REGISTRY $GIT_CI_IMAGE_REGISTRY:$CI_COMMIT_SHA
    - docker push $GIT_CI_IMAGE_REGISTRY:$CI_COMMIT_SHA
  only:
    - staging
  tags:
    - shell

deploy-staging:
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
  stage: deploy
  script:
    - cd /home/argocd-demo/applications/staging/
    - kustomize edit set image $GIT_CI_IMAGE_REGISTRY:$CI_COMMIT_SHA
    - cat kustomization.yaml # show data change
    - git add .
    - git commit -m "Staging image update to version latest"
    - git push origin master
  only:
    - staging
  tags:
    - shell

build-production:
  stage: build
  script:
    - docker login -u $GIT_CI_USERNAME -p $GIT_CI_PASSWORD $GIT_CI_REGISTRY
    - docker build -t $GIT_CI_IMAGE_REGISTRY .
    - docker tag $GIT_CI_IMAGE_REGISTRY $GIT_CI_IMAGE_REGISTRY:$CI_COMMIT_SHA
    - docker push $GIT_CI_IMAGE_REGISTRY:$CI_COMMIT_SHA
  only:
    - production
  tags:
    - shell

deploy-production:
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
  stage: deploy
  script:
    - cd /home/argocd-demo/applications/production/
    - kustomize edit set image $GIT_CI_IMAGE_REGISTRY:$CI_COMMIT_SHA
    - cat kustomization.yaml # show data change
    - git add .
    - git commit -m "Production image update to version latest"
    - git push origin master
  only:
    - production
  tags:
    - shell


